{"meta":{"title":"Akiya の手記","subtitle":"Akiya の手記","description":null,"author":"Chiahao Lin (Akiya)","url":"https://purepennons.github.io"},"pages":[],"posts":[{"title":"ava-futuristic-javaScript-test-runner","slug":"ava-futuristic-javaScript-test-runner","date":"2017-05-27T06:13:00.000Z","updated":"2017-05-29T17:06:57.000Z","comments":true,"path":"2017/05/27/ava-futuristic-javaScript-test-runner/","link":"","permalink":"https://purepennons.github.io/2017/05/27/ava-futuristic-javaScript-test-runner/","excerpt":"","text":"AVA Futuristic JavaScript test runner https://github.com/avajs/ava Why AVA? Simple test syntax like tape (e.g. t.deepEqual, t.pass, …) No implicit globals like mocha (e.g describe , it) Runs tests concurrently (troll!) Process isolation for each test file Support ES2017 by Babel (stage-4) Support: Promise Generator async/await Observable … Basic usage Take a look 1234import test from 'ava';test('just a demo', t =&gt; &#123; t.deepEqual([1, 2], [1, 2]);&#125;); Run 1234567891011121314# install ava cli$ npm install -g ava# install dependency &amp; run$ npm install ava# run$ ava# auto reload$ ava --watch# Or you can add the testing script for package.json.$ ava --init$ npm test Simple result Verbose result Tap style result Can integrate with any tap reporters. Integrate with tap-nyan Enhanced assertion messages Fail case 123456789101112import test from 'ava';test('enhanced assertion messages - case 1', t =&gt; &#123; const a = &#123;a: 10, b: 20&#125;; const b = &#123;a: 20, b: 20&#125; t.deepEqual(a, b);&#125;);test('enhanced assertion messages - case 2', t =&gt; &#123; const a = 'bar'; const b = 'bar'; const c = 'baz'; t.true((a === b) &amp;&amp; (b === c));&#125;); Result case 1 case 2 You can use any assertion library (e.g. chai, node assert). But the magic assert only supports with default assertion library. Babel Write babel presets in ava field of package.json. 12345\"ava\": &#123; \"babel\": &#123; \"presets\": [\"es2015\", \"stage-0\"] &#125;&#125; Or just inherit from .babelrc. 123\"ava\": &#123; \"babel\": \"inherit\"&#125; If you need to load the extra babel modules, use require option in the babel field. 1234567\"ava\": &#123; \"babel\": \"inherit\", \"require\": [ \"babel-register\", \"babel-polyfill\" ]&#125; Or you want to load from an entrypoint. 123456\"ava\": &#123; \"babel\": \"inherit\", \"require\": [ \"./test/set-babel.js\" ]&#125; ./test/set-babel.js 12require('babel-register')require('babel-polyfill') Test coverage Cannot use istanbul for code coverage. Use nyc (Istanbul CLI) instead. 1$ nyc ava Promise1234567891011121314 test(t =&gt; &#123; return somePromise().then(result =&gt; &#123; t.is(result, 'unicorn'); &#125;); &#125;);``` ## Generator```javascript test(function * (t) &#123; const value = yield generatorFn(); t.true(value); &#125;); async/await12345678910test(async function (t) &#123; const value = await promiseFn(); t.true(value);&#125;);// Async arrow functiontest(async t =&gt; &#123; const value = await promiseFn(); t.true(value);&#125;); Observable123456789test(t =&gt; &#123; t.plan(3); return Observable.of(1, 2, 3, 4, 5, 6) .filter(n =&gt; &#123; // Only even numbers return n % 2 === 0; &#125;) .map(() =&gt; t.pass());&#125;); Callback use test.cb() t.end() only work with test.cb() , must be called at the end of callback. 1234test.cb(t =&gt; &#123; // `t.end` automatically checks for error as first argument fs.readFile('data.txt', t.end);&#125;); Assertions .pass([message]) / .fail([message]) .truthy(value, [message]) / .falsy(value, [message]) .true(value, [message]) / .false(value, [message]) .is(value, expected, [message]) / .not(value, expected, [message]) .deepEqual(value, expected, [message]) / .notDeepEqual(value, expected, [message]) .throws(function|promise, [error, [message]]) / .notThrows(function|promise, [message]) .regex(contents, regex, [message]) / .notRegex(contents, regex, [message]) .ifError(error, [message]) .snapshot(contents, [message]) Snapshot AVA can take a snapshot which uses jest-snapshot under the hood. Example: hello.jsx 1234import React from 'react'import ReactDOM from 'react-dom'const Hello = () =&gt; &lt;h1&gt;Hello&lt;/h1&gt;export default Hello react.spec.js 123456789import test from 'ava'import React from 'react'import render from 'react-test-renderer'import Hello from '../app/hello.jsx'test('test react component', async t =&gt; &#123; const dom_tree = render.create(&lt;Hello /&gt;).toJSON() console.log(dom_tree) t.snapshot(dom_tree)&#125;) It will create a __snapshots__ folder in the test folder and contains the following result. First run Snapshot result And when the result is not equal to the snapshot, it will fail the test. If you want to update the snapshot, just use --update-snapshots or -u options.https://d2mxuefqeaa7sj.cloudfront.net/s_40E81CC28D06286B542B06554F0AD203FFC3CC719886DFCA8E86E84FE46DB9D5_1495473968079_image.png before/after Hooks test.before(): Hooks before the first test. 12345const db = init_db(db_config)test.before(async t =&gt; &#123; // db connection await db.sequelize.sync(&#123; force: true &#125;)&#125;) test.after(): Hooks after the last test. 12345678910111213141516171819202122232425 test.after.always(async t =&gt; &#123; // close the db connection await db.sequelize.close() &#125;)``` - If you want to guarantee to run the hook (even failure), use `test.after.always()` ## beforeEach/afterEach Hooks- `test.beforeEach()`: Hooks before each test.```javascript test.beforeEach(async t =&gt; &#123; t.context.clients = &#123;&#125; &#125;)``` - `test.afterEach()`: Hooks after each test. - Same as `test.after()`, use `test.after.always()` to guarantee the hook. ```javascript test.afterEach.always(async t =&gt; &#123; Object.keys(t.context.clients) .map(client =&gt; t.context.clients[client].disconnect()) &#125;) You can share the context (t.context) in each test. (Only works for beforeEach/afterEach hooks) 123test(async t =&gt; &#123; t.context.clients['client1'] = socket.connect(socket_url, client_ops)&#125;) Other APIs test.serial(): Force test serialization. test.only(): Running specific tests (effect all test files). test.skip(): Just skip the test. test.todo(): Add a todo test, AVA will ignore it. test.failing(): Mark known failure. Mocking AVA doesn’t support mocking, just use any other mocking library like Sinon.js or testdouble.js. Debug in Chrome DevTools Launch test file by inspect-process. Just use debugger keyword in the test file. 12$ npm install --global inspect-process$ inspect node_modules/ava/profile.js &lt;your-test-file&gt; Debug in VS Code Add following configuration in the launch.json Set the breakpoints and run. 1234567891011\"configurations\": [ &#123; \"type\": \"node\", \"request\": \"launch\", \"name\": \"ava test\", \"program\": \"$&#123;workspaceRoot&#125;/node_modules/ava/profile.js\", \"args\": [ \"$&#123;file&#125;\" ] &#125;] Trolls &amp; Bad things Must run with ava-cli Only can limit the execution time by CLI (global setting) ava –timeout=30s Cannot set for each test case. Must write tests carefully because of the concurrency. e.g. Test transactions in a same table. Force test serialization test.serial() $ ava --serial Other reference TypeScript in ava: https://github.com/avajs/ava/blob/master/docs/recipes/typescript.md Flow in AVA: https://github.com/avajs/ava/issues/986 React AVA workshop: https://github.com/kentcdodds/react-ava-workshop Testing React components: https://github.com/avajs/ava/blob/master/docs/recipes/react.md Configuring Babel: https://github.com/avajs/ava/blob/master/docs/recipes/babelrc.md Setting up AVA for browser testing: https://github.com/avajs/ava/blob/master/docs/recipes/browser-testing.md","categories":[{"name":"test","slug":"test","permalink":"https://purepennons.github.io/categories/test/"}],"tags":[{"name":"ava","slug":"ava","permalink":"https://purepennons.github.io/tags/ava/"},{"name":"test","slug":"test","permalink":"https://purepennons.github.io/tags/test/"},{"name":"node.js","slug":"node-js","permalink":"https://purepennons.github.io/tags/node-js/"}]},{"title":"test","slug":"test","date":"2017-05-08T17:16:46.000Z","updated":"2017-05-08T17:27:28.000Z","comments":true,"path":"2017/05/09/test/","link":"","permalink":"https://purepennons.github.io/2017/05/09/test/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-05-08T17:00:41.000Z","updated":"2017-05-08T17:00:41.000Z","comments":true,"path":"2017/05/09/hello-world/","link":"","permalink":"https://purepennons.github.io/2017/05/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}