{"meta":{"title":"Akiya の手記","subtitle":"Akiya の手記","description":null,"author":"Chiahao Lin (Akiya)","url":"https://purepennons.github.io"},"pages":[],"posts":[{"title":"JSON-WEB-TOKEN-JWT","slug":"毫無反應，就是個 JWT","date":"2017-06-25T00:40:00.000Z","updated":"2017-06-25T01:00:08.000Z","comments":true,"path":"2017/06/25/毫無反應，就是個 JWT/","link":"","permalink":"https://purepennons.github.io/2017/06/25/毫無反應，就是個 JWT/","excerpt":"","text":"毫無反應，就是個 JWT (JSON Web Token)什麼是 JWT？ 一種基於 JSON 格式，用於傳輸信任資訊的簽章 (signature) 與編碼 (encoding) 技術 因此資料可以反解 (decoding) 回去 常用於分散式環境下，取代 session 認證，可擴展的解決方案 單點認證 JWT 描述使用者資訊，可達成無狀態 (stateless) e.g. eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ Session 的問題？ Server 記憶體消耗 擴展困難 跨主機間的 session 共享？ CSRF JWT 運作流程 https://cdn.auth0.com/content/jwt/jwt-diagram.png Server-side 無需保存 users 資料 =&gt; 無記憶體消耗 JWT 本身包含所需的使用資料，可達成 stateless HTTP APIs =&gt; 方便擴展 JWT 的存放可以完全不透過 Cookies =&gt; 沒有 CSRF 的可能 JWT 原理 Header 描述使用的簽章演算法，並透過 Base64URL 編碼 對稱 / 非對稱加密皆可使用，通常使用 HMAC256 Payload 描述使用者與提供者所需要的資訊，並透過 Base64URL 編碼 避免儲存敏感資料 另外有標準特別規範的聲明 (並未硬性要求) iss: Issuer，JWT 的簽章者，可驗證是否原本的簽章者簽章 sub: Subject，此 JWT 底下服務的服務，需要局部或全域唯一 (unique) aud: Audience，接收此 JWT 的使用者，一個可被 identify 的 StringOrURI exp: JWT 過期時間，此數值必須大於簽章時間，單位為秒 nbf: 定義在此時間點以前，JWT 都是不可用的 iat: JWT 的簽章時間 jti: JWT 的唯一識別，可用於一次性 koken，避免重放攻擊 (replay attack) Signature 將 Header 與 Payload 以 . 相連，然後根據指定的演算法，加上 secret key 簽章 若是使用非對稱 RSA 加密，則透過 private key 簽章，然後透過 public key 驗證 將 Header、Payload 與 Signature 分別以 . 相連的結果，即為我們產生的 token 注意 通常會使用 Base64URL 編碼取代 Base64 Base64URL 會另外處理瀏覽器 URL 上的特殊符號 e.g. “+” =&gt; “-”, “/” =&gt; “_” Base64URL 是可反解的，避免儲存敏感資料 Secret Key 只存在 Server，需妥善保管 JWT 的產生與驗證皆只在 Server-side 完成 驗證 將 Client 傳輸過來的 token，取出 Header 與 Payload 的部份，根據 Header 描述的演算法，配合 secret key 重新運算簽章流程，比較是否與 Signature 相同，相同則表示未經偽造。 另外將 Payload 解碼，取出聲明依序驗證（可包含規範與自定的聲明） e.g. 驗證 exp 是否有大於當前時間，若否，則失效 使用 Client 每次請求時，皆會帶上 token 給 Server 驗證 正規作法是透過 HTTP 的 Authorization header，以 Bearer ${token} 的形式帶上 e.g. Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ Bearer 只是描述要以 JWT 的方式驗證，沒有硬性規定，以 Client 與 Server 約定為主 亦可透過 GET 的的 query string (較不建議) 或 set cookies (有 CSRF 風險) 的形式達成 JWT demo with koa2 Github: https://github.com/purepennons/jwt_demo JWT 的繆誤 並非加密 (encryption) 機制，資料可被解碼，並且只是單純的驗證資訊是否被竄改 因此沒有能力確保資料安全，避免存放敏感資料 確保資料安全請用 SSL/TLS 其他 根據使用的安全性需求，調整 token 的壽命，或者是使用一次性 token jwt.io 有提供 Debugger 與建議的各語言實作套件清單 node: node-jsonwebtoken 參考資料 Web 技術中的 Session 是什麼？ What is SSL, TLS and HTTPS? 讓我們來談談 CSRF 5 Easy Steps to Understanding JSON Web Tokens (JWT) jwt.io JSON Web Token (JWT) draft-ietf-oauth-json-web-token-32","categories":[{"name":"security","slug":"security","permalink":"https://purepennons.github.io/categories/security/"}],"tags":[{"name":"JWT","slug":"JWT","permalink":"https://purepennons.github.io/tags/JWT/"},{"name":"security","slug":"security","permalink":"https://purepennons.github.io/tags/security/"},{"name":"node","slug":"node","permalink":"https://purepennons.github.io/tags/node/"}]},{"title":"AVA: Futuristic JavaScript Test Runner","slug":"ava-futuristic-javaScript-test-runner","date":"2017-05-27T06:13:00.000Z","updated":"2017-05-29T17:32:27.000Z","comments":true,"path":"2017/05/27/ava-futuristic-javaScript-test-runner/","link":"","permalink":"https://purepennons.github.io/2017/05/27/ava-futuristic-javaScript-test-runner/","excerpt":"","text":"AVA Futuristic JavaScript test runner https://github.com/avajs/ava Why AVA? Simple test syntax like tape (e.g. t.deepEqual, t.pass, …) No implicit globals like mocha (e.g describe , it) Runs tests concurrently (troll!) Process isolation for each test file Support ES2017 by Babel (stage-4) Support: Promise Generator async/await Observable … Basic usage Take a look 1234import test from 'ava';test('just a demo', t =&gt; &#123; t.deepEqual([1, 2], [1, 2]);&#125;); Run 1234567891011121314# install ava cli$ npm install -g ava# install dependency &amp; run$ npm install ava# run$ ava# auto reload$ ava --watch# Or you can add the testing script for package.json.$ ava --init$ npm test Simple result Verbose result Tap style result Can integrate with any tap reporters. Integrate with tap-nyan Enhanced assertion messages Fail case 123456789101112import test from 'ava';test('enhanced assertion messages - case 1', t =&gt; &#123; const a = &#123;a: 10, b: 20&#125;; const b = &#123;a: 20, b: 20&#125; t.deepEqual(a, b);&#125;);test('enhanced assertion messages - case 2', t =&gt; &#123; const a = 'bar'; const b = 'bar'; const c = 'baz'; t.true((a === b) &amp;&amp; (b === c));&#125;); Result case 1 case 2 You can use any assertion library (e.g. chai, node assert). But the magic assert only supports with default assertion library. Babel Write babel presets in ava field of package.json. 12345\"ava\": &#123; \"babel\": &#123; \"presets\": [\"es2015\", \"stage-0\"] &#125;&#125; Or just inherit from .babelrc. 123\"ava\": &#123; \"babel\": \"inherit\"&#125; If you need to load the extra babel modules, use require option in the babel field. 1234567\"ava\": &#123; \"babel\": \"inherit\", \"require\": [ \"babel-register\", \"babel-polyfill\" ]&#125; Or you want to load from an entrypoint. 123456\"ava\": &#123; \"babel\": \"inherit\", \"require\": [ \"./test/set-babel.js\" ]&#125; ./test/set-babel.js 12require('babel-register')require('babel-polyfill') Test coverage Cannot use istanbul for code coverage. Use nyc (Istanbul CLI) instead. 1$ nyc ava Promise12345test(t =&gt; &#123; return somePromise().then(result =&gt; &#123; t.is(result, 'unicorn'); &#125;);&#125;); Generator1234test(function* (t) &#123; const value = yield generatorFn(); t.true(value);&#125;); async/await12345678910test(async function (t) &#123; const value = await promiseFn(); t.true(value);&#125;);// Async arrow functiontest(async t =&gt; &#123; const value = await promiseFn(); t.true(value);&#125;); Observable123456789test(t =&gt; &#123; t.plan(3); return Observable.of(1, 2, 3, 4, 5, 6) .filter(n =&gt; &#123; // Only even numbers return n % 2 === 0; &#125;) .map(() =&gt; t.pass());&#125;); Callback use test.cb() t.end() only work with test.cb() , must be called at the end of callback. 1234test.cb(t =&gt; &#123; // `t.end` automatically checks for error as first argument fs.readFile('data.txt', t.end);&#125;); Assertions .pass([message]) / .fail([message]) .truthy(value, [message]) / .falsy(value, [message]) .true(value, [message]) / .false(value, [message]) .is(value, expected, [message]) / .not(value, expected, [message]) .deepEqual(value, expected, [message]) / .notDeepEqual(value, expected, [message]) .throws(function|promise, [error, [message]]) / .notThrows(function|promise, [message]) .regex(contents, regex, [message]) / .notRegex(contents, regex, [message]) .ifError(error, [message]) .snapshot(contents, [message]) Snapshot AVA can take a snapshot which uses jest-snapshot under the hood. Example: hello.jsx 1234import React from 'react'import ReactDOM from 'react-dom'const Hello = () =&gt; &lt;h1&gt;Hello&lt;/h1&gt;export default Hello react.spec.js 123456789import test from 'ava'import React from 'react'import render from 'react-test-renderer'import Hello from '../app/hello.jsx'test('test react component', async t =&gt; &#123; const dom_tree = render.create(&lt;Hello /&gt;).toJSON() console.log(dom_tree) t.snapshot(dom_tree)&#125;) It will create a __snapshots__ folder in the test folder and contains the following result. First run Snapshot result And when the result is not equal to the snapshot, it will fail the test. If you want to update the snapshot, just use --update-snapshots or -u options.https://d2mxuefqeaa7sj.cloudfront.net/s_40E81CC28D06286B542B06554F0AD203FFC3CC719886DFCA8E86E84FE46DB9D5_1495473968079_image.png before/after Hooks test.before(): Hooks before the first test. 12345const db = init_db(db_config)test.before(async t =&gt; &#123; // db connection await db.sequelize.sync(&#123; force: true &#125;)&#125;) test.after(): Hooks after the last test. 12345678910111213141516171819202122232425 test.after.always(async t =&gt; &#123; // close the db connection await db.sequelize.close() &#125;)``` - If you want to guarantee to run the hook (even failure), use `test.after.always()` ## beforeEach/afterEach Hooks- `test.beforeEach()`: Hooks before each test.```javascript test.beforeEach(async t =&gt; &#123; t.context.clients = &#123;&#125; &#125;)``` - `test.afterEach()`: Hooks after each test. - Same as `test.after()`, use `test.after.always()` to guarantee the hook. ```javascript test.afterEach.always(async t =&gt; &#123; Object.keys(t.context.clients) .map(client =&gt; t.context.clients[client].disconnect()) &#125;) You can share the context (t.context) in each test. (Only works for beforeEach/afterEach hooks) 123test(async t =&gt; &#123; t.context.clients['client1'] = socket.connect(socket_url, client_ops)&#125;) Other APIs test.serial(): Force test serialization. test.only(): Running specific tests (effect all test files). test.skip(): Just skip the test. test.todo(): Add a todo test, AVA will ignore it. test.failing(): Mark known failure. Mocking AVA doesn’t support mocking, just use any other mocking library like Sinon.js or testdouble.js. Debug in Chrome DevTools Launch test file by inspect-process. Just use debugger keyword in the test file. 12$ npm install --global inspect-process$ inspect node_modules/ava/profile.js &lt;your-test-file&gt; Debug in VS Code Add following configuration in the launch.json Set the breakpoints and run. 1234567891011\"configurations\": [ &#123; \"type\": \"node\", \"request\": \"launch\", \"name\": \"ava test\", \"program\": \"$&#123;workspaceRoot&#125;/node_modules/ava/profile.js\", \"args\": [ \"$&#123;file&#125;\" ] &#125;] Trolls &amp; Bad things Must run with ava-cli Only can limit the execution time by CLI (global setting) ava –timeout=30s Cannot set for each test case. Must write tests carefully because of the concurrency. e.g. Test transactions in a same table. Force test serialization test.serial() $ ava --serial Other reference TypeScript in ava: https://github.com/avajs/ava/blob/master/docs/recipes/typescript.md Flow in AVA: https://github.com/avajs/ava/issues/986 React AVA workshop: https://github.com/kentcdodds/react-ava-workshop Testing React components: https://github.com/avajs/ava/blob/master/docs/recipes/react.md Configuring Babel: https://github.com/avajs/ava/blob/master/docs/recipes/babelrc.md Setting up AVA for browser testing: https://github.com/avajs/ava/blob/master/docs/recipes/browser-testing.md","categories":[{"name":"test","slug":"test","permalink":"https://purepennons.github.io/categories/test/"}],"tags":[{"name":"ava","slug":"ava","permalink":"https://purepennons.github.io/tags/ava/"},{"name":"test","slug":"test","permalink":"https://purepennons.github.io/tags/test/"},{"name":"node.js","slug":"node-js","permalink":"https://purepennons.github.io/tags/node-js/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-05-08T17:00:41.000Z","updated":"2017-05-08T17:00:41.000Z","comments":true,"path":"2017/05/09/hello-world/","link":"","permalink":"https://purepennons.github.io/2017/05/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}